<?php
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Mengambil dan sanitasi data form
    $name = sanitizeInput($_POST["name"]);
    $email = sanitizeInput($_POST["email"]);
    $password = sanitizeInput($_POST["password"]);
    $confirmPassword = sanitizeInput($_POST["confirm"]);
    $agreeTerms = isset($_POST["kotak"]) ? true : false; // Check if the checkbox is checked

    // Validasi
    if (empty($name) || empty($email) || empty($password) || empty($confirmPassword)) {
        echo "Data wajib diisi !!!";
    } elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
        echo "Email tidak ditemukan.";
    } elseif (!validatePassword($password)) {
        echo "Password harus terdiri dari angka, symbol, huruf besar, huruf kecil, dan minimal 8 karakter!";
    } elseif ($password != $confirmPassword) {
        echo "Password and Confirm Password tidak sama !!!";
    } elseif (!$agreeTerms) {
        echo "Anda harus menyetujui Syarat dan ketentuan yang berlaku!";
    } else {
        // Password hash (security)
        $hashedPassword = password_hash($password, PASSWORD_DEFAULT);
    }
} else {
    // Jika terjadi error pada pembuatan akun
    echo "Invalid form submission.";
}

function sanitizeInput($input) {
    // Use this function to sanitize user input
    $input = trim($input);
    $input = stripslashes($input);
    $input = htmlspecialchars($input);
    return $input;
}

// Function untuk validasi email
function validateEmail($email) {
    $emailRegex = '/^[^\s@]+@[^\s@]+\.[^\s@]+$/';
    return preg_match($emailRegex, $email);
}

// Function untuk validasi password
function validatePassword($password) {
    // Customize requirements as needed
    $passwordRegex = '/^(?=.*\d)(?=.*[!@#$%^&*])(?=.*[a-z])(?=.*[A-Z]).{8,}$/';
    return preg_match($passwordRegex, $password);
}
?>

<?php
header("Access-Control-Allow-Origin: *");
header("Access-Control-Allow-Methods: POST, OPTIONS");
header("Access-Control-Allow-Headers: Content-Type");

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Mengambil dan sanitasi data form
    $name = sanitizeInput($_POST["name"]);
    $email = sanitizeInput($_POST["email"]);
    $password = sanitizeInput($_POST["password"]);

    // Validasi data input
    if (strlen($name) < 4 || !filter_var($email, FILTER_VALIDATE_EMAIL)) {
        http_response_code(400); 
        echo "Input data tidak valid.";
    } else {
        require('../controller/connection.php');

        if ($con->connect_error) {
            http_response_code(500); 
            echo "Koneksi database gagal: " . $con->connect_error;
        } else {
            // Validasi Email
            if (isEmailExists($con, $email)) {
                http_response_code(400); 
                echo "Email sudah ada.";
            } else {
                // Validasi Username
                if (isUsernameExists($con, $name)) {
                    http_response_code(400); 
                    echo "Username sudah dipakai.";
                } else {
                    // Insert user baru
                    if (insertUser($con, $name, $email, $password)) {
                        echo "Registrasi berhasil!";
                    } else {
                        http_response_code(500); 
                        echo "Registrasi gagal.";
                    }
                }
            }

            $con->close();
        }
    }
} else {
    echo json_encode(["status" => "error", "message" => "Metode request tidak valid."]);
}

function sanitizeInput($input) {
    // Gunakan fungsi ini untuk membersihkan input pengguna
    $input = trim($input);
    $input = stripslashes($input);
    $input = htmlspecialchars($input);
    return $input;
}

function isEmailExists($con, $email) {
    $checkEmailQuery = "SELECT * FROM users WHERE Email = ?";
    $checkEmailStmt = $con->prepare($checkEmailQuery);
    $checkEmailStmt->bind_param("s", $email);
    $checkEmailStmt->execute();
    $resultEmail = $checkEmailStmt->get_result();

    return $resultEmail->num_rows > 0;
}

function isUsernameExists($con, $name) {
    $checkUsernameQuery = "SELECT * FROM users WHERE Name = ?";
    $checkUsernameStmt = $con->prepare($checkUsernameQuery);
    $checkUsernameStmt->bind_param("s", $name);
    $checkUsernameStmt->execute();
    $resultUsername = $checkUsernameStmt->get_result();

    return $resultUsername->num_rows > 0;
}

function insertUser($con, $name, $email, $password) {
    $insertUserQuery = "INSERT INTO users (UserId, Name, Email) VALUES (null, ?, ?)";
    $insertUserStmt = $con->prepare($insertUserQuery);
    $insertUserStmt->bind_param("ss", $name, $email);

    if ($insertUserStmt->execute()) {
        $userID = $insertUserStmt->insert_id;

        $insertPasswordQuery = "INSERT INTO passwords (password_id, UserId, password) VALUES (null, ?, ?)";
        $insertPasswordStmt = $con->prepare($insertPasswordQuery);
        $hashedPassword = password_hash($password, PASSWORD_DEFAULT);
        $insertPasswordStmt->bind_param("is", $userID, $hashedPassword);

        return $insertPasswordStmt->execute();
    }

    return false;
}
?>


<?php
header("Access-Control-Allow-Origin: *");
header("Access-Control-Allow-Methods: POST, OPTIONS");
header("Access-Control-Allow-Headers: Content-Type");

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $userName = $_POST['name'];
    $userEmail = $_POST['email'];
    $userPassword = $_POST['password'];

    if (strlen($userName) < 4 || !filter_var($userEmail, FILTER_VALIDATE_EMAIL)) {
        http_response_code(400); 
        echo "input data tidak valid.";
    } else {
        require('../controller/connection.php');

        if ($con->connect_error) {
            http_response_code(500); 
            echo "Koneksi database gagal: " . $con->connect_error;
        } else {
            $checkEmailQuery = "SELECT * FROM users WHERE Email = ?";
            $checkEmailStmt = $con->prepare($checkEmailQuery);
            $checkEmailStmt->bind_param("s", $userEmail);
            $checkEmailStmt->execute();
            $resultEmail = $checkEmailStmt->get_result();

            if ($resultEmail->num_rows > 0) {
                http_response_code(400); 
                echo "Email sudah ada";
            } else {
                $checkUsernameQuery = "SELECT * FROM users WHERE Name = ?";
                $checkUsernameStmt = $con->prepare($checkUsernameQuery);
                $checkUsernameStmt->bind_param("s", $userName);
                $checkUsernameStmt->execute();
                $resultUsername = $checkUsernameStmt->get_result();

                if ($resultUsername->num_rows > 0) {
                    http_response_code(400); 
                    echo "Username sudah dipakai.";
                } else {
                    $insertUserQuery = "INSERT INTO users (UserId, Name, Email) VALUES (null, ?, ?)";
                    $insertUserStmt = $con->prepare($insertUserQuery);
                    $insertUserStmt->bind_param("ss", $userName, $userEmail);
        
                    if ($insertUserStmt->execute()) {
                        $userID = $insertUserStmt->insert_id;

                        $insertPasswordQuery = "INSERT INTO passwords (password_id, UserId, password) VALUES (null, ?, ?)";
                        $insertPasswordStmt = $con->prepare($insertPasswordQuery);
                        $hashedPassword = password_hash($userPassword, PASSWORD_DEFAULT);
                        $insertPasswordStmt->bind_param("is", $userID, $hashedPassword);

                        if ($insertPasswordStmt->execute()) {
                            echo "Registrasi berhasil!";
                        } else {
                            http_response_code(500); 
                            echo "Registrasi gagal (password): " . $insertPasswordStmt->error;
                        }

                        $insertPasswordStmt->close();
                    } else {
                        http_response_code(500); 
                        echo "Registrasi gagal (user): " . $insertUserStmt->error;
                    }

                    $insertUserStmt->close();
                }
            }

            $con->close();
        }
    }
} else {
    echo json_encode(["status" => "error", "message" => "Metode request tidak valid."]);
}
?>
